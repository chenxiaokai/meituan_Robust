package com.meituan.robust.autopatch;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by mivanzhang on 17/1/19.
 *
 * Reading mapping from mapping.txt,which is generated by ProGuard
 */

public class ReadMapping {
    private static ReadMapping instance;

    //key 为混淆前类全名(com.example.package.Demo) value 为ClassMapping.memberMapping 为demo中所有 字段 方法 混淆的 map对应
    private Map<String, ClassMapping> usedInModifiedClassMappingInfo = new HashMap<String, ClassMapping>();

    public static ReadMapping getInstance() {
        if (instance == null) {
            instance = new ReadMapping();
        }
        return instance;
    }

    public static void init() {
        instance = new ReadMapping();
    }

    private ReadMapping() {

    }

    /***
     * read all class mapping info
     *
     * @return
     */
    public void initMappingInfo() {
        //查找mapping文件
        InputStream is = null;
        boolean needBacktrace = true;
        String line;
        try {
            //读取 app/robust/mapping.txt 文件
            // mapping.txt 文件 带冒号结尾 是当前 混淆对象， 冒号后面没有冒号结尾的，是当前混淆对象的 字段 方法 混淆前 和 混淆后 对照
            is = new FileInputStream(Config.mappingFilePath);
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"), 1024);
            // 读取一行，存储于字符串列表中
            line = reader.readLine().trim();

            while (line != null) {
                line = line.trim();
                if (!needBacktrace) {
                    line = reader.readLine();
                    if (line == null) {
                        break;
                    }
                    line = line.trim();
                }
                needBacktrace = false;
                if (line.indexOf("->") > 0 && line.indexOf(":") == line.length() - 1) {
                    ClassMapping classMapping = new ClassMapping();
                    classMapping.setClassName(line.substring(0, line.indexOf("->") - 1).trim()); // -> 左边的值
                    classMapping.setValueName(line.split("->")[1].substring(0, line.split("->")[1].length() - 1).trim()); // -> 右边的值
                    line = reader.readLine();
                    while (line != null) {
                        line=line.trim();

                        if (line.endsWith(":")) {
                            needBacktrace = true;
                            break;
                        }
                        String[] lineinfo = line.split(" ");
                        if (lineinfo.length != 4) {
                            throw new RuntimeException("mapping line info is error  " + line);
                        }
                        if (lineinfo[1].contains("(") && lineinfo[1].contains(")")) {
                            //methods need return type
                            classMapping.getMemberMapping().put(getMethodSigureWithReturnTypeInMapping(lineinfo[0].trim(), lineinfo[1].trim()), lineinfo[3].trim());
                        } else {
                            //fields
                            classMapping.getMemberMapping().put(lineinfo[1].trim(), lineinfo[3].trim());
                        }
                        line = reader.readLine();
                        if (line == null) {
                            break;
                        }
                        line = line.trim();
                    }
                    //mapping.txt中 每个以 冒号(:) 结尾的 对应的内部 字段 方法 映射 对应一个 ClassMapping
                    usedInModifiedClassMappingInfo.put(classMapping.getClassName(), classMapping);
                }
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public ClassMapping getClassMapping(String classname) {
        return usedInModifiedClassMappingInfo.get(classname);
    }

    public ClassMapping getClassMappingOrDefault(String classname) {
        ClassMapping defaultClassMapping=new ClassMapping();
        if(!Config.supportProGuard){
            defaultClassMapping.setValueName(classname);
        }
        return usedInModifiedClassMappingInfo.getOrDefault(classname,defaultClassMapping);
    }

    /***
     * @param returnTypeWithNumber
     * @param methodSignure
     * @return returnType+" "+methodSignure,just one blank
     */

    public String getMethodSigureWithReturnTypeInMapping(String returnTypeWithNumber, String methodSignure) {
        //初步观察mapping文件，使用":"来截取返回值，还可以通过寻找第一个字符，
        return getMethodSignureWithReturnType(returnTypeWithNumber.substring(returnTypeWithNumber.lastIndexOf(":") + 1), methodSignure);
    }

    public String getMethodSignureWithReturnType(String returnType, String methodSignure) {
        //只有一个空格
        return returnType + " " + methodSignure;
    }
}